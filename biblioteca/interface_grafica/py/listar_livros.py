# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'listar_livros.ui'
#
# Created by: PyQt5 UI code generator 5.15.9

# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Listar_Livros(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(637, 445)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Título da página
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(210, 20, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        # Tabela para mostrar os livros
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(50, 150, 541, 231))
        self.tableView.setObjectName("tableView")
        
        # Configurações básicas da tabela (que não dependem do modelo)
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableView.setAlternatingRowColors(True)
        
        # Estilo para o cabeçalho e linhas alternadas
        self.tableView.horizontalHeader().setStyleSheet("QHeaderView::section { background-color: #E0E0E0; font-weight: bold; }")
        self.tableView.setStyleSheet("QTableView { alternate-background-color: #F0F0F0; selection-background-color: #007BFF; }")
        
        # Botão para listar livros
        self.pushButton_listar = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_listar.setGeometry(QtCore.QRect(250, 90, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_listar.setFont(font)
        self.pushButton_listar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_listar.setStyleSheet("background-color: rgb(85, 170, 255);\n"
"color: rgb(255, 255, 255);\n"
" border-radius: 8px;")
        self.pushButton_listar.setObjectName("pushButton_listar")
        
        # Botão para voltar à tela inicial
        self.pushButton_voltar = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_voltar.setGeometry(QtCore.QRect(50, 390, 121, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_voltar.setFont(font)
        self.pushButton_voltar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_voltar.setStyleSheet(" border-radius: 8px;\n"
"background-color: rgb(190, 190, 190);")
        self.pushButton_voltar.setObjectName("pushButton_voltar")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 637, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Listar Livros"))
        self.label.setText(_translate("MainWindow", "Listar Livros"))
        self.pushButton_listar.setText(_translate("MainWindow", "Atualizar Lista"))
        self.pushButton_voltar.setText(_translate("MainWindow", "Voltar"))
        
    def ajustar_tabela(self, MainWindow):
        """Ajusta o tamanho da tabela quando a janela for redimensionada"""
        # Verificando se a tabela tem um modelo válido
        if self.tableView.model() is None:
            return  # Se não tiver modelo, não faz nada
        
        # Verificando se o modelo tem colunas suficientes antes de configurar colunas específicas
        try:
            # Configurando o comportamento das colunas (só pode ser feito quando o modelo está definido)
            self.tableView.horizontalHeader().setStretchLastSection(False)
            self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
            
            # Configurando estilos específicos para cada coluna
            self.tableView.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)  # Título estica
            self.tableView.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)  # Autor estica
            self.tableView.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.Fixed)    # Páginas fixo
            self.tableView.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.Fixed)    # Ano fixo
            self.tableView.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.Fixed)    # ID fixo
            
            # Definindo larguras para colunas de tamanho fixo
            self.tableView.horizontalHeader().resizeSection(2, 70)  # Páginas
            self.tableView.horizontalHeader().resizeSection(3, 70)  # Ano
            self.tableView.horizontalHeader().resizeSection(4, 70)  # ID
        except Exception as e:
            print(f"Erro ao configurar colunas da tabela: {e}")
            
        # Calcula as margens para manter espaço em todos os lados
        margem_horizontal = 50
        margem_vertical = 150
        
        # Calculando as dimensões ideais com base no tamanho atual da janela
        table_width = self.centralwidget.width() - (margem_horizontal * 2)
        table_height = self.centralwidget.height() - margem_vertical - 70  # 70 para espaço abaixo
        table_x = margem_horizontal
        table_y = margem_vertical
        
        # Aplicando a nova geometria à tabela
        self.tableView.setGeometry(QtCore.QRect(table_x, table_y, table_width, table_height))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Listar_Livros()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_()) 