version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq_broker
    hostname: rabbitmq 
    ports:
      - "5672:5672" 
      - "15672:15672" 
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ 
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{channel,error},{federation,'error'},{mirroring,'error'}]" # Reduz verbosidade dos logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  generator:
    build:
      context: ./generator
      dockerfile: Dockerfile
    container_name: message_generator
    depends_on:
      rabbitmq:
        condition: service_healthy 
    environment:
      - RABBITMQ_HOST=rabbitmq 
    networks:
      - app-network
    restart: on-failure

  consumer_face:
    build:
      context: ./consumer-face
      dockerfile: Dockerfile
    container_name: face_consumer_ai
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    networks:
      - app-network
    restart: on-failure

  consumer_team:
    build:
      context: ./consumer-team
      dockerfile: Dockerfile
    container_name: team_consumer_ai
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    networks:
      - app-network
    restart: on-failure

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq_data:
