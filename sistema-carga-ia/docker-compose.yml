version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.11-management # Usamos a imagem com interface de gerenciamento
    container_name: rabbitmq_broker
    hostname: rabbitmq # Nome do host para conexão interna dos outros containers
    ports:
      - "5672:5672" # Porta AMQP padrão do RabbitMQ
      - "15672:15672" # Porta da interface de gerenciamento web
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Volume para persistir dados do RabbitMQ (opcional)
    environment:
      # Você pode definir usuários/senhas aqui, mas para teste os padrões (guest/guest) funcionam
      # RABBITMQ_DEFAULT_USER: user
      # RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{channel,error},{federation,'error'},{mirroring,'error'}]" # Reduz verbosidade dos logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  generator:
    build:
      context: ./generator
      dockerfile: Dockerfile
    container_name: message_generator
    depends_on:
      rabbitmq:
        condition: service_healthy # Espera o RabbitMQ estar saudável
    environment:
      - RABBITMQ_HOST=rabbitmq # Usa o nome do serviço definido no compose
    networks:
      - app-network
    restart: on-failure

  consumer_face:
    build:
      context: ./consumer_face
      dockerfile: Dockerfile
    container_name: face_consumer_ai
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    networks:
      - app-network
    restart: on-failure

  consumer_team:
    build:
      context: ./consumer_team
      dockerfile: Dockerfile
    container_name: team_consumer_ai
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
    networks:
      - app-network
    restart: on-failure

# Define a rede customizada para os containers se comunicarem
networks:
  app-network:
    driver: bridge

# Define volumes para persistência (opcional)
volumes:
  rabbitmq_data: